<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--把对象的创建交给spring来管理-->
    <!--spring对bean的管理细节
        1.创建bean的三种方式：
        2.bean对象的作用范围:
        3.bean对象的生命周期:
    -->

    <!--创建bean的三种方式-->

    <!--第一种方式：使用默认构造函数创建
        使用bean标签，配以id和class属性
        默认情况下它调用的是类中的无参构造函数。如果没有无参构造函数则不能创建成功。

        <bean id="accountService" class="com.bingai.service.impl.AccountServiceImpl"></bean>
    -->

    <!--第二种方式：使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）
    <bean id="instanceFactory" class="com.bingai.factory.InstanceFactory"></bean>
    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>
    -->

    <!--第三种方式：使用静态工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）
    <bean id="accountService" class="com.bingai.factory.StaticFactory" factory-method="getAccountService"></bean>
    -->

    <!--bean对象的作用范围
        bean标签的scope属性：
            作用：用于指定bean的作用范围
            取值：
                singleton：单例的（默认值）
                prototype：多例的
                request：作用于web应用的请求范围
                session：作用于web应用的会话范围
                global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，就是session
    -->
    <bean id="accountService" class="com.bingai.service.impl.AccountServiceImpl" scope="prototype" init-method="init" destroy-method="destory"></bean>

    <!--bean对象的生命周期
            单例对象
            出生：当容器创建时对象出生
            活着：只要容器还在，对象已知活着
            死亡：容器销毁，对象消亡
            总结：单例对象的生命周期和容器相同

            多例对象
            出生：当使用对象时，spring框架为我们创建
            活着：对象只要是在使用过程中，就一直活着
            死亡：当对象长时间不用且没有别的对象引用时，由java的垃圾回收器回收



    -->

</beans>