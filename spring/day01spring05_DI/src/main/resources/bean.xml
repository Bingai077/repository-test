<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--springz中的依赖注入
        依赖注入：
            Dependency Injection
        IOC的作用：
            降低程序间的耦合(依赖关系)
        依赖关系的管理：
            以后都交给了spring来维护
         在当前类中需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
         依赖关系的维护：
            就称为依赖注入
         依赖注入：
            能注入的数据：有三类
                基本数据类型和String
                其他bean类型（在配置文件中或者注解配置过的bean）
                复杂类型/集合类型
            注入的方式：有三种
                1.使用构造函数提供
                2.使用set方法提供
                3.使用注解提供

    -->


    <!--构造函数注入【注入方式1】一般不用
        使用的标签：constructor-arg
        标签出现的位置：bean标签的内部
        标签中的属性：
            type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置从0开始
            name:用于指定给构造函数中指定名称的参数赋值
            ==================以上三个用于指定给构造函数中哪个参数赋值=========
            value:它能赋的值是基本数据类型和 String 类型
            ref:它能赋的值是其他 bean 类型，也就是说，必须得是在配置文件中配置过的 bean

         优势：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。
         弊端：
            改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。
    -->
    <bean id="accountService" class="com.bingai.service.impl.AccountServiceImpl" >
        <constructor-arg name="name" value="泰斯特"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>

    <!--配置一个日期对象-->
    <bean id="now" class="java.util.Date"></bean>


    <!--set方法注入【注入方式2】常用
        涉及标签：property
        出现的位置：bean标签的内部
        标签的属性
                name:用于指定注入时所调用的set方法名称
                value:它能赋的值是基本数据类型和 String 类型
                ref:它能赋的值是其他 bean 类型，也就是说，必须得是在配置文件中配置过的 bean
        优势：
            创建对象时没有明确的限制，可以直接使用默认构造函数
        弊端：
            如果有某个成员必须有值，则获取对象有可能是set方法没有执行
    -->
    <bean id="accountService2" class="com.bingai.service.impl.AccountServiceImpl2" >
        <property name="name" value="test"></property>
        <property name="age" value="21"></property>
        <property name="birthday" ref="now"></property>

    </bean>


    <!--复杂类型的注入/集合类型的注入
        用于给List结构集合注入的标签有：list array set
        用于给Map结构集合注入的标签有：map props
            结构相同，标签可互换
    -->
    <bean id="accountService3" class="com.bingai.service.impl.AccountServiceImpl3" >
        <property name="myStrs">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
                <value>DDD</value>
            </array>
        </property>

        <property name="myList">
            <list>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
                <value>DDD</value>
            </list>
        </property>

        <property name="mySet">
            <set>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
                <value>DDD</value>
            </set>
        </property>

        <property name="myMap">
            <map>
                <entry key="test1" value="aaa"></entry>
                <entry key="test2" >
                    <value>bbb</value>
                </entry>
            </map>
        </property>

        <property name="myProps">
            <props>
                <prop key="tsetc">ccc</prop>
                <prop key="tsetd">ddd</prop>
            </props>
        </property>



    </bean>


</beans>